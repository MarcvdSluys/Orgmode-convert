#!/bin/env python
# -*- coding: utf-8 -*-

""" latex2orgmode:  Try to convert LaTeX to Orgmode.
    2022-02-23, MvdS: initial version.
"""

# PYTHON_ARGCOMPLETE_OK


import colored_traceback
colored_traceback.add_hook()

import re



def main():
    """Main function."""
    
    infile,outfile = get_arguments()
    file_latex_to_orgmode(infile, outfile)
    
    exit(0)


def get_arguments():
    """Get CLI arguments.
    
    Parameters:
    
    Returns:
      (str):  Input file name.
      (str):  Output file name.
    """
    
    import argparse
    import argcomplete
    import sys
    
    # Parse command-line arguments:
    parser = argparse.ArgumentParser(description="Try to convert a LaTeX file to Orgmode.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)  # Use capital, period, add default values
    
    # Required arguments:
    parser.add_argument("infile", type=str, default=None, help="name of the input file (file.tex)")
    
    parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")  # Counts number of occurrences
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    
    outfile = re.sub(r'\.org\.org',r'.org', re.sub(r'\.tex',r'.org', str(args.infile))+'.org')
    if args.infile == outfile:
        sys.stderr.write('Input and output file have the same name: '+outfile+'\n')
        
    print('Input file:  '+args.infile)
    print('Output file: '+outfile)
    
    return args.infile, outfile


def file_latex_to_orgmode(infile, outfile):
    """Covert lines of text from LaTeX format to Orgmode format.

    Parameters:
      infile (str):   Name of the input file.
      outfile (str):  Name of the output file.
    """
    
    # Open the input and output files:
    # ifl = open(infile, 'r')
    ofl = open(outfile,'w')
    ofl.write('# #+startup: latexpreview  # Note: this may take a looong time when uncommented...\n')
    
    iline = 0
    with open(infile, 'r') as lines:
        try:
            while True:
                iline += 1
        
                # Read data line and extract column contents:
                # line = ifl.readline()
                line = next(lines)
                
                line = line_latex_to_orgmode(line)
                
                ofl.write('%s' % (line))
                # print(iline, line)
        except StopIteration:
            print(str(iline)+' lines processed.')
            exit
    
    return


def line_latex_to_orgmode(line):
    """Convert a line of LaTeX code to Orgmode.

    Parameters:  
      line (str):  The line containing LaTeX code.

    Returns:  
      (str):  A line containing Orgmode code.
    """
    
    line = re.sub(r'^ *\n', r'', line)  # Remove empty lines - CHECK remove this code line later!
    
    line = re.sub(r'^.*\\documentclass.*\n', r'', line)
    line = re.sub(r'^.*\\usepackage.*\n', r'', line)
    line = re.sub(r'^.*\\graphicspath.*\n', r'', line)
    line = re.sub(r'^ *%.*\n', r'', line)
    line = re.sub(r'^.*\\pdfinfo.*\n', r'', line)
    line = re.sub(r'^ */[A-Z][a-z]* *\(.*\) *\}*\n', r'', line)  # PDFinfo lines, like " /Title (<title>)"
    line = re.sub(r'^.*\\ifthenelse.*\n', r'', line)
    line = re.sub(r'^.*\\geometry.*\n', r'', line)
    line = re.sub(r'^ *\} *\n', r'', line)  # PDFinfo lines, like " /Title (<title>)"
    line = re.sub(r'^.*\\pagestyle.*\n', r'', line)
    line = re.sub(r'^.*\\makeatletter.*\n', r'', line)
    line = re.sub(r'^.*\\makeatother.*\n', r'', line)
    line = re.sub(r'^.*\\newcommand.*\n', r'', line)
    line = re.sub(r'^.*\\renewcommand.*\n', r'', line)
    line = re.sub(r'^.*\\setcounter.*\n', r'', line)
    line = re.sub(r'^.*\\setlength.*\n', r'', line)
    line = re.sub(r'^.*\\raggedright.*\n', r'', line)
    line = re.sub(r'\\vfill', r'', line)
    
    line = re.sub(r'^.*\\begin\{document\}.*\n', r'', line)
    line = re.sub(r'^.*\\end\{document\}.*\n', r'', line)
    line = re.sub(r'^.*\\begin\{multicols.*\n', r'', line)
    line = re.sub(r'^.*\\end\{multicols.*\n', r'', line)
    line = re.sub(r'\\columnbreak', r'', line)
    
    line = re.sub(r'\\normalsize', r'', line)
    line = re.sub(r'\\footnotesize', r'', line)
    line = re.sub(r'\\scriptsize', r'', line)
    # line = re.sub(r'\\newline', r'\n', line)  # '\n' will not match $ later
    line = re.sub(r'\\newline', r'', line)
    line = re.sub(r'^.*\\newtheorem\{.*\n', r'', line)
    
    line = re.sub(r'\\chapter[* ]*\{(.*)\}', r'\n* \1', line)
    line = re.sub(r'\\section[* ]*\{(.*)\}', r'\n* \1', line)
    line = re.sub(r'\\subsection[* ]*\{(.*)\}', r'\n** \1', line)
    line = re.sub(r'\\subsubsection[* ]*\{(.*)\}', r'\n*** \1', line)
    line = re.sub(r'\\paragraph[* ]*\{(.*)\}', r'\n**** \1', line)
    
    line = re.sub(r'^ *\\textbf[* ]*\{(.*)\} *$', r'\n**** \1', line)  # full-line \textbf appears to be used as a paragraph
    
    line = re.sub(r'\\textbf[* ]*\{(.*)\}', r'*\1*', line)
    line = re.sub(r'\\textit[* ]*\{(.*)\}', r'/\1/', line)
    line = re.sub(r'\\emph[* ]*\{(.*)\}', r'/\1/', line)
    
    line = re.sub(r'^([^\$]*\$) ', r'\1', line)  # Remove space after first $ in line
    line = re.sub(r' (\$[^$]*$)', r'\1', line)   # Remove space before last $ in line
    
    line = re.sub(r'^ *\$([^$]*)\$ *$', r'\[ \1 \]\n', line)  # Replace whole-line $...$ with \[...\]
    line = re.sub(r' +\$ +([^$]+) +\$ +', r'$ \1 $', line)  # Replace leftover " $ text $ " text $"
    
    
    # line = re.sub(r'^.*\\.*\n', r'', line)
    # line = re.sub(r'', r'', line)
    
    return line


if __name__ == '__main__':
    main()

